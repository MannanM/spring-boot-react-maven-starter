Description: >
  This template deploys an Application Load Balancer that exposes our various ECS services.

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC the Application Load Balancer should be deployed to

  Subnets:
    Description: Choose which subnets the Application Load Balancer should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  SecurityGroup:
    Description: Select the Security Group to apply to the Application Load Balancer
    Type: AWS::EC2::SecurityGroup::Id

  CertificateArn:
    Description: If not-empty, it will use a HTTPS listener in the loadbalancer
    Type: String

Conditions:
  InsecureLoadBalancer: !Equals [ !Ref CertificateArn, "" ]

  SecureLoadBalancer:
    !Not [ Condition: InsecureLoadBalancer ]

Resources:

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref EnvironmentName
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: InsecureLoadBalancer
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  SecureLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: SecureLoadBalancer
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
      Certificates:
        - CertificateArn: !Ref CertificateArn
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06

  # We define a default target group here, as this is a mandatory Parameters
  # when creating an Application Load Balancer Listener. This is not used, instead
  # a target group is created per-service in each service template (../services/*)

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub
        - ${EnvironmentName}-default-${Port}
        - Port: !If [SecureLoadBalancer, 443, 80]
      VpcId: !Ref VPC
      Port: !If [SecureLoadBalancer, 443, 80]
      Protocol: !If [SecureLoadBalancer, HTTPS, HTTP]

  # We define a record set here, as this will map the subdomain to the Application Load Balancer.

  Route53ARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: starter.mannanlive.com
      HostedZoneName: mannanlive.com. #note the extra full-stop here is important
      Comment: Sub-domain for the load balancer
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        EvaluateTargetHealth: false

Outputs:

  LoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref LoadBalancer

  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !GetAtt LoadBalancer.DNSName

  Listener:
    Description: A reference to a listener
    Value: !If [InsecureLoadBalancer, !Ref LoadBalancerListener, !Ref SecureLoadBalancerListener]
